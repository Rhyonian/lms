// <auto-generated />
using System;
using Lms.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lms.Api.Migrations
{
    [DbContext(typeof(LmsDbContext))]
    partial class LmsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.4.24266.1");

            modelBuilder.HasPostgresExtension("uuid-ossp");

            modelBuilder.Entity("Lms.Api.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PK_courses");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("Lms.Api.Models.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<DateTimeOffset>("EnrolledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrolled_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_enrollments");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("IX_enrollments_course_id");

                    b.HasIndex("UserId", "CourseId")
                        .IsUnique()
                        .HasDatabaseName("IX_enrollments_user_id_course_id");

                    b.ToTable("enrollments", (string)null);

                    b.HasCheckConstraint("ck_enrollments_status", "status in ('Active', 'Completed', 'Dropped')");
                });

            modelBuilder.Entity("Lms.Api.Models.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("duration_minutes");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("module_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PK_lessons");

                    b.HasIndex("ModuleId")
                        .HasDatabaseName("IX_lessons_module_id");

                    b.HasIndex("ModuleId", "DisplayOrder")
                        .IsUnique()
                        .HasDatabaseName("IX_lessons_module_id_display_order");

                    b.ToTable("lessons", (string)null);
                });

            modelBuilder.Entity("Lms.Api.Models.LessonProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<Guid>("EnrollmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("enrollment_id");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid")
                        .HasColumnName("lesson_id");

                    b.Property<decimal>("ProgressPercent")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("progress_percent");

                    b.HasKey("Id")
                        .HasName("PK_lesson_progress");

                    b.HasIndex("EnrollmentId", "LessonId")
                        .IsUnique()
                        .HasDatabaseName("IX_lesson_progress_enrollment_id_lesson_id");

                    b.HasIndex("LessonId")
                        .HasDatabaseName("IX_lesson_progress_lesson_id");

                    b.ToTable("lesson_progress", (string)null);
                });

            modelBuilder.Entity("Lms.Api.Models.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PK_modules");

                    b.HasIndex("CourseId", "DisplayOrder")
                        .IsUnique()
                        .HasDatabaseName("IX_modules_course_id_display_order");

                    b.ToTable("modules", (string)null);
                });

            modelBuilder.Entity("Lms.Api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("PK_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_users_email");

                    b.ToTable("users", (string)null);

                    b.HasCheckConstraint("ck_users_role", "role in ('Admin', 'Learner')");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2a8c4fd-3bee-4e02-9f7f-141e58aabfaa"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.Zero),
                            Email = "admin@lms.test",
                            FullName = "System Administrator",
                            PasswordHash = "81D13C99DFD9C7251D5F96773A4D829E7C94D36A86E94A285B2B657F626E0F2A",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = new Guid("8f0a3bc4-9d6f-4ac7-8c30-0550aa8a61bd"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.Zero),
                            Email = "learner1@lms.test",
                            FullName = "Learner One",
                            PasswordHash = "3F843CCCC2B25BD7C92847159B1DB6DFBAD25F1D59E0E337FCD2D478B318341A",
                            Role = "Learner"
                        },
                        new
                        {
                            Id = new Guid("a0d2c0f1-4e35-4af9-9b27-37d1b8cb0d7b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.Zero),
                            Email = "learner2@lms.test",
                            FullName = "Learner Two",
                            PasswordHash = "1B7593CC0AF1ABEFF5E40782FE68672B2E9E41EB85B56DDE806206F51C4E076A",
                            Role = "Learner"
                        },
                        new
                        {
                            Id = new Guid("2b9d6c6b-8e8e-4a79-8b1c-8c5901a6e35f"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.Zero),
                            Email = "learner3@lms.test",
                            FullName = "Learner Three",
                            PasswordHash = "E57798830538510F1811BC595FB1F9D2D910A0742D7961879D609788FFC686AD",
                            Role = "Learner"
                        },
                        new
                        {
                            Id = new Guid("a78ad293-6cd1-4e91-9f6c-98eb4146d5e0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.Zero),
                            Email = "learner4@lms.test",
                            FullName = "Learner Four",
                            PasswordHash = "123C8D9BBEF062BE2BDF25A4E105B59736BBC369988ED2F9C04A7C2A60CAC707",
                            Role = "Learner"
                        },
                        new
                        {
                            Id = new Guid("abf4b18c-bde3-4d49-89b7-6f1258f1be98"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.Zero),
                            Email = "learner5@lms.test",
                            FullName = "Learner Five",
                            PasswordHash = "A5992A782DE548DBE6B0709EAAE56CDE93CC7F3AC7BC6832226E59CEC589C561",
                            Role = "Learner"
                        });
                });

            modelBuilder.Entity("Lms.Api.Models.Enrollment", b =>
                {
                    b.HasOne("Lms.Api.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lms.Api.Models.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lms.Api.Models.Lesson", b =>
                {
                    b.HasOne("Lms.Api.Models.Module", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Lms.Api.Models.LessonProgress", b =>
                {
                    b.HasOne("Lms.Api.Models.Enrollment", "Enrollment")
                        .WithMany("ProgressEntries")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lms.Api.Models.Lesson", "Lesson")
                        .WithMany("ProgressEntries")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enrollment");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Lms.Api.Models.Module", b =>
                {
                    b.HasOne("Lms.Api.Models.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Lms.Api.Models.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("Lms.Api.Models.Lesson", b =>
                {
                    b.Navigation("ProgressEntries");
                });

            modelBuilder.Entity("Lms.Api.Models.Module", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Lms.Api.Models.User", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
